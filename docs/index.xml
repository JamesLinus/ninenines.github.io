<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Nine Nines</title>
    <link>http://ninenines.eu/docs/</link>
    <description>Recent content in Docs on Nine Nines</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://ninenines.eu/docs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cowboy Function Reference</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/manual/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_app&#34;&gt;cowboy(7)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy&#34;&gt;cowboy(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_handler&#34;&gt;cowboy_handler(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_loop&#34;&gt;cowboy_loop(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_middleware&#34;&gt;cowboy_middleware(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_protocol&#34;&gt;cowboy_protocol(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_req&#34;&gt;cowboy_req(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_rest&#34;&gt;cowboy_rest(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_router&#34;&gt;cowboy_router(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_static&#34;&gt;cowboy_static(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_sub_protocol&#34;&gt;cowboy_sub_protocol(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cowboy_websocket&#34;&gt;cowboy_websocket(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http_status_codes&#34;&gt;HTTP status codes(7)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Cowboy User Guide</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/guide/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_rationale&#34;&gt;Rationale&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;modern_web/&#34;&gt;The modern Web&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;erlang_web/&#34;&gt;Erlang and the Web&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;introduction/&#34;&gt;Introduction&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;getting_started/&#34;&gt;Getting started&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;flow_diagram/&#34;&gt;Flow diagram&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;listeners/&#34;&gt;Listeners&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;streams/&#34;&gt;Streams&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;routing/&#34;&gt;Routing&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;constraints/&#34;&gt;Constraints&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_handlers&#34;&gt;Handlers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;handlers/&#34;&gt;Handlers&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;loop_handlers/&#34;&gt;Loop handlers&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;static_files/&#34;&gt;Static files&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_request_and_response&#34;&gt;Request and response&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;req/&#34;&gt;Request details&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;req_body/&#34;&gt;Reading the request body&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;resp/&#34;&gt;Sending a response&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;cookies/&#34;&gt;Using cookies&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;multipart/&#34;&gt;Multipart&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_rest&#34;&gt;REST&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;rest_principles/&#34;&gt;REST principles&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;rest_handlers/&#34;&gt;Handling REST requests&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;rest_flowcharts/&#34;&gt;REST flowcharts&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;resource_design/&#34;&gt;Designing a resource handler&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_websocket&#34;&gt;Websocket&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ws_protocol/&#34;&gt;The Websocket protocol&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ws_handlers/&#34;&gt;Handling Websocket connections&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_internals&#34;&gt;Internals&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;architecture/&#34;&gt;Architecture&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;broken_clients/&#34;&gt;Dealing with broken clients&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;middlewares/&#34;&gt;Middlewares&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;sub_protocols/&#34;&gt;Sub protocols&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;hooks/&#34;&gt;Hooks&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Erlang.mk User Guide</title>
      <link>http://ninenines.eu/docs/en/erlang.mk/1/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/erlang.mk/1/guide/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;installation/&#34;&gt;Installation&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;getting_started/&#34;&gt;Getting started&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;overview/&#34;&gt;Overview&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;updating/&#34;&gt;Updating Erlang.mk&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;limitations/&#34;&gt;Limitations&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;app/&#34;&gt;Building&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;deps/&#34;&gt;Packages and dependencies&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ports/&#34;&gt;NIFs and port drivers&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;releases/&#34;&gt;Releases&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;escripts/&#34;&gt;Escripts&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;compat/&#34;&gt;Compatibility with other build tools&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;docs&#34;&gt;Documentation&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;asciidoc/&#34;&gt;Asciidoc documentation&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;edoc/&#34;&gt;EDoc comments&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;tests&#34;&gt;Tests&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;shell/&#34;&gt;Erlang shell&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;eunit/&#34;&gt;EUnit&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;common_test/&#34;&gt;Common Test&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;coverage/&#34;&gt;Code coverage&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ci/&#34;&gt;Continuous integration&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;dialyzer/&#34;&gt;Dialyzer&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;xref/&#34;&gt;Xref&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;plugins&#34;&gt;Third-party plugins&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;external_plugins/&#34;&gt;External plugins&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;external_plugins_list/&#34;&gt;List of plugins&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;about&#34;&gt;About Erlang.mk&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;why/&#34;&gt;Why erlang.mk?&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;history/&#34;&gt;Short history&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;contributing/&#34;&gt;Contributing&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Gun Function Reference</title>
      <link>http://ninenines.eu/docs/en/gun/1.0/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/gun/1.0/manual/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;gun_app&#34;&gt;gun(7)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;gun&#34;&gt;gun(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Gun User Guide</title>
      <link>http://ninenines.eu/docs/en/gun/1.0/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/gun/1.0/guide/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;introduction/&#34;&gt;Introduction&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;start/&#34;&gt;Starting and stopping&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;protocols/&#34;&gt;Supported protocols&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;connect/&#34;&gt;Connection&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http/&#34;&gt;Using HTTP&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;websocket/&#34;&gt;Using Websocket&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>HTTP status codes(7)</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/manual/http_status_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/manual/http_status_codes/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_name&#34;&gt;Name&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;HTTP status codes - status codes used by Cowboy&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This chapter aims to list all HTTP status codes that Cowboy
may return, with details on the reasons why. The list given
here only includes the replies that Cowboy sends, not user
replies.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_100_continue&#34;&gt;100 Continue&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;When the client sends an &lt;code&gt;expect: 100-continue&lt;/code&gt; header,
Cowboy automatically sends a this status code before
trying to read the request body. This behavior can be
disabled using the appropriate body option.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_101_switching_protocols&#34;&gt;101 Switching Protocols&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This is the status code sent when switching to the
Websocket protocol.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_200_ok&#34;&gt;200 OK&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_201_created&#34;&gt;201 Created&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_202_accepted&#34;&gt;202 Accepted&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_204_no_content&#34;&gt;204 No Content&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent when the processing of a request
ends without any reply having been sent. It may also be
sent by &lt;code&gt;cowboy_rest&lt;/code&gt; under normal conditions.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_300_multiple_choices&#34;&gt;300 Multiple Choices&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_301_moved_permanently&#34;&gt;301 Moved Permanently&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_303_see_other&#34;&gt;303 See Other&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_304_not_modified&#34;&gt;304 Not Modified&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_307_temporary_redirect&#34;&gt;307 Temporary Redirect&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_400_bad_request&#34;&gt;400 Bad Request&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Cowboy will send this status code for any of the
following reasons:&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Too many empty lines were sent before the request.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The request-line could not be parsed.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Too many headers were sent.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A header name was too long.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A header value was too long.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The host header was missing from an HTTP/1.1 request.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The host header could not be parsed.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The requested host was not found.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The requested path could not be parsed.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The accept header could not be parsed when using REST.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
REST under normal conditions.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A Websocket upgrade failed.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_401_unauthorized&#34;&gt;401 Unauthorized&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_403_forbidden&#34;&gt;403 Forbidden&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_404_not_found&#34;&gt;404 Not Found&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent when the router successfully
resolved the host but didn&amp;#8217;t find a matching path for
the request. It may also be sent by &lt;code&gt;cowboy_rest&lt;/code&gt; under
normal conditions.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_405_method_not_allowed&#34;&gt;405 Method Not Allowed&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_406_not_acceptable&#34;&gt;406 Not Acceptable&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_408_request_timeout&#34;&gt;408 Request Timeout&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Cowboy will send this status code to the client if the
client started to send a request, indicated by the
request-line being received fully, but failed to send
all headers in a reasonable time.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_409_conflict&#34;&gt;409 Conflict&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_410_gone&#34;&gt;410 Gone&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_412_precondition_failed&#34;&gt;412 Precondition Failed&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_413_request_entity_too_large&#34;&gt;413 Request Entity Too Large&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_414_request_uri_too_long&#34;&gt;414 Request-URI Too Long&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Cowboy will send this status code to the client if the
request-line is too long. It may also be sent by
&lt;code&gt;cowboy_rest&lt;/code&gt; under normal conditions.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_415_unsupported_media_type&#34;&gt;415 Unsupported Media Type&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_500_internal_server_error&#34;&gt;500 Internal Server Error&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent when a crash occurs in HTTP, loop
or REST handlers, or when an invalid return value is
returned. It may also be sent by &lt;code&gt;cowboy_rest&lt;/code&gt; under
normal conditions.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_501_not_implemented&#34;&gt;501 Not Implemented&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_503_service_unavailable&#34;&gt;503 Service Unavailable&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This status code is sent by &lt;code&gt;cowboy_rest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_505_http_version_not_supported&#34;&gt;505 HTTP Version Not Supported&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Cowboy only supports the versions 1.0 and 1.1 of HTTP.
In all other cases this status code is sent back to the
client and the connection is closed.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ranch Function Reference</title>
      <link>http://ninenines.eu/docs/en/ranch/1.2/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/ranch/1.2/manual/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ranch_app&#34;&gt;ranch(7)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ranch&#34;&gt;ranch(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ranch_protocol&#34;&gt;ranch_protocol(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ranch_ssl&#34;&gt;ranch_ssl(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ranch_tcp&#34;&gt;ranch_tcp(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ranch_transport&#34;&gt;ranch_transport(3)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ranch User Guide</title>
      <link>http://ninenines.eu/docs/en/ranch/1.2/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/ranch/1.2/guide/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;introduction/&#34;&gt;Introduction&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;listeners/&#34;&gt;Listeners&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;transports/&#34;&gt;Transports&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;protocols/&#34;&gt;Protocols&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;embedded/&#34;&gt;Embedded mode&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;parsers/&#34;&gt;Writing parsers&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;ssl_auth/&#34;&gt;SSL client authentication&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;internals/&#34;&gt;Internals&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Request overview</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/guide/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/guide/overview/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This chapter explains the different steps a request
goes through until a response is sent, along with
details of the Cowboy implementation.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_request_response&#34;&gt;Request/response&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;As you already know, HTTP clients connect to the server and
send a request for a resource; the server then sends a
response containing the resource if it could obtain it.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Before the server can send the resource, however, it
needs to perform many different operations to read the
request, find the resource, prepare the response being
sent and often other related operations the user can
add like writing logs.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Requests take the following route in Cowboy:&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../http_req_resp.png&#34; alt=&#34;HTTP request/response flowchart&#34; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This shows the default middlewares, but they may be
configured differently in your setup. The dark green
indicates the points where you can hook your own code,
the light green is the Cowboy code that you can of
course configure as needed.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;acceptor&lt;/code&gt; is the part of the server that accepts
the connection and create an Erlang process to handle
it. The &lt;code&gt;parser&lt;/code&gt; then starts reading from the socket
and handling requests as they come until the socket
is closed.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;A response may be sent at many different points in the
life of the request. If Cowboy can&amp;#8217;t parse the request,
it gives up with an error response. If the router can&amp;#8217;t
find the resource, it sends a not found error. Your
own code can of course send a response at any time.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;When a response is sent, you can optionally modify it
or act upon it by enabling the &lt;code&gt;onresponse&lt;/code&gt; hook. By
default the response is sent directly to the client.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_and_then&#34;&gt;And then?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Behavior depends on what protocol is in use.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;HTTP/1.0 can only process one request per connection,
so Cowboy will close the connection immediately after
it sends the response.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;HTTP/1.1 allows the client to request that the server
keeps the connection alive. This mechanism is described
in the next section.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;HTTP/2 is designed to allow sending multiple requests
asynchronously on the same connection. Details on what
this means for your application is described in this
chapter.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_keep_alive_http_1_1&#34;&gt;Keep-alive (HTTP/1.1)&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;With HTTP/1.1, the connection may be left open for
subsequent requests to come. This mechanism is called
&lt;code&gt;keep-alive&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;When the client sends a request to the server, it includes
a header indicating whether it would like to leave the
socket open. The server may or may not accept, indicating
its choice by sending the same header in the response.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Cowboy will include this header automatically in all
responses to HTTP/1.1 requests. You can however force
the closing of the socket if you want. When Cowboy sees
you want to send a &lt;code&gt;connection: close&lt;/code&gt; header, it will
not override it and will close the connection as soon
as the reply is sent.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This snippet will force Cowboy to close the connection.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;!-- Generator: GNU source-highlight 3.1.8
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style=&#34;color: #009900&#34;&gt;Req2&lt;/span&gt; &lt;span style=&#34;color: #990000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;cowboy_req:reply&lt;/span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #993399&#34;&gt;200&lt;/span&gt;, [
    {&lt;span style=&#34;color: #990000&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #FF0000&#34;&gt;&#34;connection&#34;&lt;/span&gt;&lt;span style=&#34;color: #990000&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #990000&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #FF0000&#34;&gt;&#34;close&#34;&lt;/span&gt;&lt;span style=&#34;color: #990000&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;},
], &lt;span style=&#34;color: #990000&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #FF0000&#34;&gt;&#34;Closing the socket in 3.. 2.. 1..&#34;&lt;/span&gt;&lt;span style=&#34;color: #990000&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #009900&#34;&gt;Req&lt;/span&gt;)&lt;span style=&#34;color: #990000&#34;&gt;.&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Cowboy will only accept a certain number of new requests
on the same connection. By default it will run up to 100
requests. This number can be changed by setting the
&lt;code&gt;max_keepalive&lt;/code&gt; configuration value when starting an
HTTP listener.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;!-- Generator: GNU source-highlight 3.1.8
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;cowboy:start_http&lt;/span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #FF6600&#34;&gt;my_http_listener&lt;/span&gt;, &lt;span style=&#34;color: #993399&#34;&gt;100&lt;/span&gt;, [{&lt;span style=&#34;color: #FF6600&#34;&gt;port&lt;/span&gt;, &lt;span style=&#34;color: #993399&#34;&gt;8080&lt;/span&gt;}], [
        {&lt;span style=&#34;color: #FF6600&#34;&gt;env&lt;/span&gt;, [{&lt;span style=&#34;color: #FF6600&#34;&gt;dispatch&lt;/span&gt;, &lt;span style=&#34;color: #009900&#34;&gt;Dispatch&lt;/span&gt;}]},
        {&lt;span style=&#34;color: #FF6600&#34;&gt;max_keepalive&lt;/span&gt;, &lt;span style=&#34;color: #993399&#34;&gt;5&lt;/span&gt;}
])&lt;span style=&#34;color: #990000&#34;&gt;.&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Cowboy implements the keep-alive mechanism by reusing
the same process for all requests. This allows Cowboy
to save memory. This works well because most code will
not have any side effect impacting subsequent requests.
But it also means you need to clean up if you do have
code with side effects. The &lt;code&gt;terminate/3&lt;/code&gt; function can
be used for this purpose.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pipelining_http_1_1&#34;&gt;Pipelining (HTTP/1.1)&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;While HTTP is designed as a sequential protocol, with
the client sending a request and then waiting for the
response from the server, nothing prevents the client
from sending more requests to the server without waiting
for the response, due to how sockets work. The server
still handles the requests sequentially and sends the
responses in the same order.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This mechanism is called pipelining. It allows reducing
latency when a client needs to request many resources
at the same time. This is used by browsers when requesting
static files for example.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This is handled automatically by the server.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_asynchronous_requests_http_2&#34;&gt;Asynchronous requests (HTTP/2)&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;In HTTP/2, the client can send a request at any time.
And the server can send a response at any time too.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This means for example that the client does not need
to wait for a request to be fully sent to send another,
it is possible to interleave a request with the request
body of another request. The same is true with responses.
Responses may also be sent in a different order.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Because requests and responses are fully asynchronous,
Cowboy creates a new process for each request, and these
processes are managed by another process that handles the
connection itself.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;HTTP/2 servers may also decide to send resources to the
client before the client requests them. This is especially
useful for sending static files associated with the HTML
page requested, as this reduces the latency of the overall
response. Cowboy does not support this particular mechanism
at this point, however.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>cowboy(3)</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_name&#34;&gt;Name&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;cowboy - HTTP server&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;cowboy&lt;/code&gt; module provides convenience functions for
manipulating Ranch listeners.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_types&#34;&gt;Types&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_fields_field&#34;&gt;fields() = [Field]&lt;/h3&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;!-- Generator: GNU source-highlight 3.1.8
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style=&#34;color: #009900&#34;&gt;Field&lt;/span&gt; &lt;span style=&#34;color: #990000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000080&#34;&gt;atom&lt;/span&gt;&lt;/span&gt;()
        | {&lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000080&#34;&gt;atom&lt;/span&gt;&lt;/span&gt;(), &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;cowboy_constraints:constraint&lt;/span&gt;&lt;/span&gt;() | [&lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;cowboy_constraints:constraint&lt;/span&gt;&lt;/span&gt;()]}
        | {&lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000080&#34;&gt;atom&lt;/span&gt;&lt;/span&gt;(), &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;cowboy_constraints:constraint&lt;/span&gt;&lt;/span&gt;() | [&lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;cowboy_constraints:constraint&lt;/span&gt;&lt;/span&gt;()], &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;any&lt;/span&gt;&lt;/span&gt;()}]&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Fields for match operations. Constraint(s) and default value are optional.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_http_headers_binary_iodata&#34;&gt;http_headers() = [{binary(), iodata()}]&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;HTTP headers as a list of key/values.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_http_status_non_neg_integer_binary&#34;&gt;http_status() = non_neg_integer() | binary()&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;HTTP status.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;A binary status can be used to set a custom message.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_http_version_http_1_1_http_1_0&#34;&gt;http_version() = &#39;HTTP/1.1&#39; | &#39;HTTP/1.0&#39;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;HTTP version.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_code_onresponse_fun_fun_http_status_http_headers_iodata_cowboy_req_req_gt_cowboy_req_req_code&#34;&gt;&lt;code&gt;onresponse_fun() = fun((http_status(), http_headers(), iodata(), cowboy_req:req()) -&amp;gt; cowboy_req:req())&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Fun called immediately before sending the response.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;It can perform any operation on the Req object, including
reading the request body or replying. If a reply is sent, it
overrides the reply initially sent. The callback will not be
called again for the new reply.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exports&#34;&gt;Exports&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_start_http_ref_nbacceptors_transopts_protoopts_8594_ok_pid&#34;&gt;start_http(Ref, NbAcceptors, TransOpts, ProtoOpts) &amp;#8594; {ok, pid()}&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Ref = ranch:ref()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Listener name.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
NbAcceptors = non_neg_integer()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Number of acceptor processes.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
TransOpts = ranch_tcp:opts()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
TCP transport options.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
ProtoOpts = cowboy_protocol:opts()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
HTTP protocol options.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Start listening for HTTP connections. Returns the pid for this
listener&amp;#8217;s supervisor.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_start_https_ref_nbacceptors_transopts_protoopts_8594_ok_pid&#34;&gt;start_https(Ref, NbAcceptors, TransOpts, ProtoOpts) &amp;#8594; {ok, pid()}&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Ref = ranch:ref()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Listener name.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
NbAcceptors = non_neg_integer()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Number of acceptor processes.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
TransOpts = ranch_ssl:opts()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
SSL transport options.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
ProtoOpts = cowboy_protocol:opts()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
HTTP protocol options.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Start listening for HTTPS connections. Returns the pid for this
listener&amp;#8217;s supervisor.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_stop_listener_ref_8594_ok_error_not_found&#34;&gt;stop_listener(Ref) &amp;#8594; ok | {error, not_found}&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Ref = ranch:ref()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Listener name.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Stop a previously started listener.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_set_env_ref_name_value_8594_ok&#34;&gt;set_env(Ref, Name, Value) &amp;#8594; ok&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Ref = ranch:ref()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Listener name.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Name = atom()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Name of environment value.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Value = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Environment value.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Set or update an environment value for an already running listener.
This will take effect on all subsequent connections.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_see_also&#34;&gt;See also&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;a href=&#34;http://ninenines.eu/docs/en/ranch/HEAD/guide&#34;&gt;Ranch guide&lt;/a&gt;
provides detailed information about how listeners work.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>cowboy(7)</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_app/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_name&#34;&gt;Name&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;cowboy - Small, fast, modular HTTP server.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_dependencies&#34;&gt;Dependencies&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;cowboy&lt;/code&gt; application uses the Erlang applications &lt;code&gt;ranch&lt;/code&gt;
for listening and accepting TCP connections, &lt;code&gt;crypto&lt;/code&gt; for
establishing Websocket connections, and &lt;code&gt;cowlib&lt;/code&gt; for parsing and
building messages for Web protocols. These dependencies must
be loaded for the &lt;code&gt;cowboy&lt;/code&gt; application to work. In an embedded
environment this means that they need to be started with the
&lt;code&gt;application:start/{1,2}&lt;/code&gt; function before the &lt;code&gt;cowboy&lt;/code&gt;
application is started.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;cowboy&lt;/code&gt; application also uses the Erlang applications
&lt;code&gt;asn1&lt;/code&gt;, &lt;code&gt;public_key&lt;/code&gt; and &lt;code&gt;ssl&lt;/code&gt; when listening for HTTPS connections.
These are started automatically if they weren&amp;#8217;t before.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_environment&#34;&gt;Environment&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;cowboy&lt;/code&gt; application does not define any application
environment configuration parameters.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>cowboy_handler(3)</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_handler/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_name&#34;&gt;Name&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;cowboy_handler - handler middleware and behaviour&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;cowboy_handler&lt;/code&gt; middleware executes the handler passed
through the environment values &lt;code&gt;handler&lt;/code&gt; and &lt;code&gt;handler_opts&lt;/code&gt;,
and adds the result of this execution to the environment as
the value &lt;code&gt;result&lt;/code&gt;, indicating that the request has been
handled and received a response.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Environment input:&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
handler = module()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Handler to be executed.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
handler_opts = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Options to be passed to the handler.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Environment output:&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
result = ok
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Result of the request.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This module also defines the &lt;code&gt;cowboy_handler&lt;/code&gt; behaviour that
defines the basic interface for handlers. All Cowboy handlers
implement at least the &lt;code&gt;init/2&lt;/code&gt; callback, and may implement
the &lt;code&gt;terminate/3&lt;/code&gt; callback optionally.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_terminate_reasons&#34;&gt;Terminate reasons&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The following values may be received as the terminate reason
in the optional &lt;code&gt;terminate/3&lt;/code&gt; callback. Different handler types
may define additional terminate reasons.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
normal
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        The connection was closed normally.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
{crash, Class, Reason}
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        A crash occurred in the handler. &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;Reason&lt;/code&gt; can be
        used to obtain more information about the crash. The function
        &lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; can also be called to obtain the
        stacktrace of the process when the crash occurred.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_callbacks&#34;&gt;Callbacks&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_init_req_opts_8594_ok_req_state_module_req_state_module_req_state_hibernate_timeout_module_req_state_timeout_hibernate&#34;&gt;init(Req, Opts) &amp;#8594; {ok, Req, State} | {Module, Req, State} | {Module, Req, State, hibernate | Timeout} | {Module, Req, State, Timeout, hibernate}&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Req = cowboy_req:req()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
The Req object.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Opts = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Handler options.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
State = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Handler state.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Module = module()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Module of the sub-protocol to use.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Timeout = timeout()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Timeout passed to the sub-protocol, when applicable.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Process the request.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This function can be used to switch to an alternate handler
type by returning the name of the module to be used, along
with a few options.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;For basic handlers this is the function where the response
should be sent. If no response is sent, Cowboy will ensure
that a &lt;code&gt;204 No Content&lt;/code&gt; response is sent.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;A crash in this callback will result in &lt;code&gt;terminate/3&lt;/code&gt; being
called if it is defined, with the &lt;code&gt;State&lt;/code&gt; argument set to
the value of &lt;code&gt;Opts&lt;/code&gt; originally given to the &lt;code&gt;init/2&lt;/code&gt; callback.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_terminate_reason_req_state_8594_ok&#34;&gt;terminate(Reason, Req, State) &amp;#8594; ok&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Reason = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Reason for termination.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Req = cowboy_req:req()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
The Req object.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
State = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Handler state.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Perform any necessary cleanup of the state.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This callback should release any resource currently in use,
clear any active timer and reset the process to its original
state, as it might be reused for future requests sent on the
same connection. Typical plain HTTP handlers rarely need to
use it.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;A crash in this callback or an invalid return value will
result in the closing of the connection and the termination
of the process.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exports&#34;&gt;Exports&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_terminate_reason_req_state_handler_8594_ok&#34;&gt;terminate(Reason, Req, State, Handler) &amp;#8594; ok&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Reason = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Reason for termination.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Req = cowboy_req:req()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
The Req object.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
State = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Handler state.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Handler = module()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Handler module.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Call the optional &lt;code&gt;terminate/3&lt;/code&gt; callback if it exists.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This function should always be called at the end of the execution
of a handler, to give it a chance to clean up or perform
miscellaneous operations.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>cowboy_loop(3)</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_loop/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_name&#34;&gt;Name&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;cowboy_loop - loop handlers&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;cowboy_loop&lt;/code&gt; module implements a handler interface for
long running HTTP connections. It is the recommended interface
for long polling and server-sent events, amongst others.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This module is a sub protocol that defines three callbacks to
be implemented by handlers. The &lt;code&gt;init/2&lt;/code&gt; and &lt;code&gt;terminate/3&lt;/code&gt;
callbacks are common to all handler types and are documented
in the manual for the &lt;a href=&#34;cowboy_handler.asciidoc&#34;&gt;cowboy_handler&lt;/a&gt; module.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;info/3&lt;/code&gt; callback is specific to loop handlers and will be
called as many times as necessary until a reply is sent.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;It is highly recommended to return a timeout value from the
&lt;code&gt;init/2&lt;/code&gt; callback to ensure that the process is terminated
when no data has been received during that timespan. The
default timeout is &lt;code&gt;infinity&lt;/code&gt;, which should only be used if
you have alternate means of ending inactive connections.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_terminate_reasons&#34;&gt;Terminate reasons&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The following values may be received as the terminate reason
in the optional &lt;code&gt;terminate/3&lt;/code&gt; callback.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
normal
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        The connection was closed normally before switching to the
        loop sub protocol. This typically happens if an &lt;code&gt;ok&lt;/code&gt; tuple is
        returned from the &lt;code&gt;init/2&lt;/code&gt; callback.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
stop
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        The handler requested to close the connection by returning
        a &lt;code&gt;stop&lt;/code&gt; tuple.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
timeout
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        The connection has been closed due to inactivity. The timeout
        value can be configured from &lt;code&gt;init/2&lt;/code&gt;. The response sent when
        this happens is a &lt;code&gt;204 No Content&lt;/code&gt;.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
{crash, Class, Reason}
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        A crash occurred in the handler. &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;Reason&lt;/code&gt; can be
        used to obtain more information about the crash. The function
        &lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; can also be called to obtain the
        stacktrace of the process when the crash occurred.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
{error, overflow}
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        The connection is being closed and the process terminated
        because the buffer Cowboy uses to keep data sent by the
        client has reached its maximum. The buffer size can be
        configured through the environment value &lt;code&gt;loop_max_buffer&lt;/code&gt;
        and defaults to 5000 bytes.
       &lt;br /&gt;
        If the long running request comes with a body it is recommended
        to process this body before switching to the loop sub protocol.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
{error, closed}
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        The socket has been closed brutally without a close frame being
        received first.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
{error, Reason}
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        A socket error ocurred.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_callbacks&#34;&gt;Callbacks&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_info_info_req_state_8594_ok_req_state_ok_req_state_hibernate_stop_req_state&#34;&gt;info(Info, Req, State) &amp;#8594; {ok, Req, State} | {ok, Req, State, hibernate} | {stop, Req, State}&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Info = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Message received by the process.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Req = cowboy_req:req()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
The Req object.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
State = any()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
Handler state.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Handle the Erlang message received.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This function will be called every time an Erlang message
has been received. The message can be any Erlang term.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;stop&lt;/code&gt; return value can be used to stop the receive loop,
typically because a response has been sent.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;hibernate&lt;/code&gt; option will hibernate the process until
it receives another message.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>cowboy_middleware(3)</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_middleware/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_name&#34;&gt;Name&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;cowboy_middleware - behaviour for middlewares&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;cowboy_middleware&lt;/code&gt; behaviour defines the interface used
by Cowboy middleware modules.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Middlewares process the request sequentially in the order they
are configured.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_types&#34;&gt;Types&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_env_atom_any&#34;&gt;env() = [{atom(), any()}]&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The environment variable.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;One is created for every request. It is passed to each
middleware module executed and subsequently returned,
optionally with its contents modified.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_callbacks&#34;&gt;Callbacks&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_execute_req_env_8594_ok_req_env_suspend_module_function_args_stop_req&#34;&gt;execute(Req, Env) &amp;#8594; {ok, Req, Env} | {suspend, Module, Function, Args} | {stop, Req}&lt;/h3&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Req = cowboy_req:req()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
The Req object.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Env = env()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
The request environment.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Module = module()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
MFA to call when resuming the process.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Function = atom()
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
MFA to call when resuming the process.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
Args = [any()]
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
MFA to call when resuming the process.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Execute the middleware.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;ok&lt;/code&gt; return value indicates that everything went well
and that Cowboy should continue processing the request. A
response may or may not have been sent.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;suspend&lt;/code&gt; return value will hibernate the process until
an Erlang message is received. Note that when resuming, any
previous stacktrace information will be gone.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;stop&lt;/code&gt; return value stops Cowboy from doing any further
processing of the request, even if there are middlewares
that haven&amp;#8217;t been executed yet. The connection may be left
open to receive more requests from the client.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>cowboy_protocol(3)</title>
      <link>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_protocol/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_name&#34;&gt;Name&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;cowboy_protocol - HTTP protocol&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_description&#34;&gt;Description&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The &lt;code&gt;cowboy_protocol&lt;/code&gt; module implements HTTP/1.1 and HTTP/1.0
as a Ranch protocol.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_types&#34;&gt;Types&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_opts_option&#34;&gt;opts() = [Option]&lt;/h3&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;!-- Generator: GNU source-highlight 3.1.8
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style=&#34;color: #009900&#34;&gt;Option&lt;/span&gt; &lt;span style=&#34;color: #990000&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;compress&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;boolean&lt;/span&gt;&lt;/span&gt;()}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;env&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;cowboy_middleware:env&lt;/span&gt;&lt;/span&gt;()}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;max_empty_lines&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;non_neg_integer&lt;/span&gt;&lt;/span&gt;()}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;max_header_name_length&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;non_neg_integer&lt;/span&gt;&lt;/span&gt;()}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;max_header_value_length&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;non_neg_integer&lt;/span&gt;&lt;/span&gt;()}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;max_headers&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;non_neg_integer&lt;/span&gt;&lt;/span&gt;()}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;max_keepalive&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;non_neg_integer&lt;/span&gt;&lt;/span&gt;()}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;max_request_line_length&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;non_neg_integer&lt;/span&gt;&lt;/span&gt;()}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;middlewares&lt;/span&gt;, [&lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;module&lt;/span&gt;&lt;/span&gt;()]}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;onresponse&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;cowboy:onresponse_fun&lt;/span&gt;&lt;/span&gt;()}
        | {&lt;span style=&#34;color: #FF6600&#34;&gt;timeout&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;timeout&lt;/span&gt;&lt;/span&gt;()}&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Configuration for the HTTP protocol handler.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;This configuration is passed to Cowboy when starting listeners
using &lt;code&gt;cowboy:start_http/4&lt;/code&gt; or &lt;code&gt;cowboy:start_https/4&lt;/code&gt; functions.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;It can be updated without restarting listeners using the
Ranch functions &lt;code&gt;ranch:get_protocol_options/1&lt;/code&gt; and
&lt;code&gt;ranch:set_protocol_options/2&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_option_descriptions&#34;&gt;Option descriptions&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;The default value is given next to the option name.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
compress (false)
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        When enabled, Cowboy will attempt to compress the response body.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
env ([{listener, Ref}])
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        Initial middleware environment.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
max_empty_lines (5)
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        Maximum number of empty lines before a request.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
max_header_name_length (64)
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        Maximum length of header names.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
max_header_value_length (4096)
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        Maximum length of header values.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
max_headers (100)
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        Maximum number of headers allowed per request.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
max_keepalive (100)
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        Maximum number of requests allowed per connection.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
max_request_line_length (4096)
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        Maximum length of the request line.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
middlewares ([cowboy_router, cowboy_handler])
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        List of middlewares to execute for every requests.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
onresponse (undefined)
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        Fun called every time a response is sent.
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;
timeout (5000)
&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;
        Time in ms with no requests before Cowboy closes the connection.
&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>